{
    "contents" : "---\ntitle: \"Practical Machine Learning Project\"\nauthor: \"Jason Olson\"\ndate: \"Tuesday, October 13, 2015\"\noutput: html_document\n---\n\n#Executive Summary\nThis paper covers the process for creating a model to predict the quality of an individual dumbbell lift. The data was collected from a series of devices used to track motion and comes from the following source: http://groupware.les.inf.puc-rio.br/har. \n\nThe actual quality of the movements is categorized into the follwoing five different classifications as highlighted below:\n\n* Exactly according to the specification (Class A)\n* Throwing the elbows to the front (Class B)\n* Lifting the dumbbell only halfway (Class C)\n* Lowering the dumbbell only halfway (Class D)\n* Throwing the hips to the front (Class E)\n\nIn the end a Random Forest model was used to predict which type of classification each lift had. The prediction accuracy rate was 97.88%. Based on the high level of accuracy, it was determined that we can accurate predict the quality of a dumbbell lift based on the motion data which was collected.\n\n#Question\nThe specific question which will I attempt to answer in this paper is whether the approapriate activity quality (Class A-E) can be predicted based on the motion data collected in the original study.\n\n#Data Prepartion\nTo get started with the anlaysis I first had to import the caret library, set the seed (to make it reproducible) and import the training and test data sets.\n\n```{r prep, echo=TRUE, warning=FALSE, cache=TRUE, message=FALSE}\nlibrary(caret)\nlibrary(randomForest)\nset.seed(11111)\n\norgTrain <- read.csv(\"pml-training.csv\")\norgTest <- read.csv(\"pml-testing.csv\")\n```\n\nAfter taking a quick look at a summary of all the various measures, there are many which I removed to simplify the data set and get down to the core measurments. It was decided that those core measuresments which I would keep were only those that were measuring the various movements on the x, y and z axes. These were selected because it is the movement along these axes that are of interest in determining the quality of a movement. In additional many of the other measures lacked consistency and completeness across all of the samples. This whittles the the list down to 36 predictors and the one outcome class (classe).\n\n```{r dataFiltering, echo=TRUE, warning=FALSE, cache=TRUE, message=FALSE}\ntrain <- orgTrain[,-c(1:36,46:59,69:83,84:112,122:150)]\ntest <- orgTest[,-c(1:36,46:59,69:83,84:112,122:150)]\n\nnrow(train)\n```\n\nDue to the large number of records in the data set I am going to further divide the training set into a trainig set, a large validation set and a small validation set. This will enable me to test and get a better feel for my expected out of sample error rate prior to running against the test set.\n\n```{r setCreation, echo=TRUE, warning=FALSE, cache=TRUE, message=FALSE}\ninTrain <- createDataPartition(y=train$classe, p=0.6, list=FALSE)\ntrainTrain <- train[inTrain,]\ntrainValid <- train[-inTrain,]\n\ninLarge <- createDataPartition(y=trainValid$classe, p=0.99, list=FALSE)\ntrainValidLg <- trainValid[inLarge,]\ntrainValidSm <- trainValid[-inLarge,]\n```\n\n#Model Generation\nThe model approach that I will be using is a Random Forest. I have selected this model primarily due to its accuracy. It it quite slow but once it is generated it can quickly and accurately be used to predict for the test data set.\n\nSeveral different values for the ntree and mtry parameters were tried but the only thing that seemed to drastically change was the amount of time that it took to execute. Based on that I have selected to go with an ntree value of 2,000 and an mtry value of 2.\n\n```{r modelGeneration, echo=TRUE, warning=FALSE, cache=TRUE, message=FALSE}\nmodFit <- randomForest(classe ~ ., data=trainTrain, ntree=2000, mtry=2) \nmodFit\n```\n\nThis model was created with an estimated error rate of 1.51% (accuracy rate of 98.49%). The next step will be to take the model and run it against the large and small validation data sets to see how the model accuracy comes out.\n\nThe first will be against the large validation data set. The prediction will be run and then a confusion matrix will be run against the results in order to do some cross validation.\n\n```{r predict1, echo=TRUE, warning=FALSE, cache=TRUE, message=FALSE}\npred1 <- predict(modFit, trainValidLg)\nconfusionMatrix(pred1,trainValidLg$classe)\n```\n\nFrom the results you can see that it is seeing an accuracy rate of 98.39% with a 95% confidence interval of 98.09% to 98.66%. \n\nNext we'll run against the small validation data set as that will give a more realistic picture of what the out of sample error rate will be when we run against the 20 record test set.\n\n```{r predict2, echo=TRUE, warning=FALSE, cache=TRUE, message=FALSE}\npred2 <- predict(modFit, trainValidSm)\nconfusionMatrix(pred2,trainValidSm$classe)\n```\n\nFrom this confusion matrix we can see it has a 97.37% accuracy rate with a 95% confidence interval of 90.82% to 99.68%. \n\nAs you can see in the cross validation for this prediction, there is only one value that it incorrectly predicted. If we were to do anyt98hing in the future to try and improve this model that is where I would look but a 98.68% accuracy rate is quite good and at some point I would just be overfitting.\n\nIf we average the two accuracy ratings it comes out to a 97.88% accuracy rating which leaves me with a high level of confidence going into the test set. Based on that I would expect around a 2.12% error rate.\n\n#Generate Predictions\nThe final step in the analysis is to run the model against the test recordset and see the results.\n\n```{r finalPredict, echo=TRUE, warning=FALSE, cache=TRUE, message=FALSE}\nanswers <- predict(modFit, test)\nanswers\n```\n\nFor submission purposes the predictions will be placed into a seperate file each.\n\n```{r generateFiles, echo=TRUE, warning=FALSE, cache=TRUE, message=FALSE}\npml_write_files = function(x){\n  n = length(x)\n  for(i in 1:n){\n    filename = paste0(\"problem_id_\",i,\".txt\")\n    write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)\n  }\n}\npml_write_files(answers)\n```\n\n",
    "created" : 1444998570648.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3108462206",
    "id" : "CAACA377",
    "lastKnownWriteTime" : 1444999614,
    "path" : "C:/R/PracticalMachineLearning/report.Rmd",
    "project_path" : "report.Rmd",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_markdown"
}